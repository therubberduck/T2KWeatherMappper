package almanac

import org.joda.time.DateTime
import org.joda.time.DateTimeZone
import org.joda.time.LocalDateTime
import org.joda.time.LocalTime
import org.junit.jupiter.api.Test

import org.junit.jupiter.api.Assertions.*
import java.io.File

class SunriseCalcTest {

    val testData = "2020-Jan-01 06:47,*,r, 18 43 38.64, -23 03 36.1,  -26.779,-10.590,  0.98328749080981, -0.2564480,    0.0000,/?,    0.0000,   2.5353424,  85.725036,  -0.493341,         n.a.,    n.a.,\n" +
            " 2020-Jan-01 10:39,*,t, 18 44 21.02, -23 02 52.2,  -26.779,-10.590,  0.98327296296894, -0.0348528,    0.0000,/?,    0.0000,   2.5248021,  85.457377,  -0.072282,         n.a.,    n.a.,\n" +
            " 2020-Jan-01 14:32,C,s, 18 45 03.58, -23 02 05.4,  -26.779,-10.590,  0.98328108193754,  0.1874127,    0.0000,/?,    0.0000,   2.5366537,  85.229570,  0.3503813,         n.a.,    n.a.,\n" +
            " 2020-Jan-02 06:47,*,r, 18 48 03.63, -22 58 46.1,  -26.779,-10.590,  0.98326902525443, -0.2485651,    0.0000,/?,    0.0000,   2.5352201,  85.290842,  -0.478385,         n.a.,    n.a.,\n" +
            " 2020-Jan-02 10:40,*,t, 18 48 46.14, -22 57 57.5,  -26.779,-10.590,  0.98325521355244, -0.0258829,    0.0000,/?,    0.0000,   2.5246999,  85.021200,  -0.055159,         n.a.,    n.a.,\n" +
            " 2020-Jan-02 14:33,C,s, 18 49 28.64, -22 57 06.3,  -26.779,-10.590,  0.98326417179269,  0.1963044,    0.0000,/?,    0.0000,   2.5366420,  84.796712,  0.3672861,         n.a.,    n.a.,\n" +
            " 2020-Jan-03 06:47,*,r, 18 52 28.28, -22 53 28.6,  -26.779,-10.590,  0.98325546899833, -0.2402914,    0.0000,/?,    0.0000,   2.5350660,  84.858697,  -0.462688,         n.a.,    n.a.,\n" +
            " 2020-Jan-03 10:40,*,t, 18 53 10.73, -22 52 35.6,  -26.779,-10.590,  0.98324242441251, -0.0176459,    0.0000,/?,    0.0000,   2.5245635,  84.588381,  -0.039433,         n.a.,    n.a.,\n" +
            " 2020-Jan-03 14:34,C,s, 18 53 53.35, -22 51 39.7,  -26.779,-10.590,  0.98325225373032,  0.2056128,    0.0000,/?,    0.0000,   2.5365994,  84.366106,  0.3849866,         n.a.,    n.a.,\n" +
            " 2020-Jan-04 06:47,*,r, 18 56 52.54, -22 47 43.7,  -26.779,-10.590,  0.98324705466467, -0.2316185,    0.0000,/?,    0.0000,   2.5348853,  84.428796,  -0.446231,         n.a.,    n.a.,\n" +
            " 2020-Jan-04 10:41,*,t, 18 57 35.11, -22 46 46.1,  -26.779,-10.590,  0.98323481184521, -0.0078521,    0.0000,/?,    0.0000,   2.5244055,  84.156693,  -0.020732,         n.a.,    n.a.,\n" +
            " 2020-Jan-04 14:35,C,s, 18 58 17.67, -22 45 45.7,  -26.779,-10.590,  0.98324556244354,  0.2153459,    0.0000,/?,    0.0000,   2.5365311,  83.937950,  0.4034971,         n.a.,    n.a.,\n" +
            " 2020-Jan-05 06:47,*,r, 19 01 16.41, -22 41 31.7,  -26.779,-10.590,  0.98324401912497, -0.2225394,    0.0000,/?,    0.0000,   2.5346833,  84.001333,  -0.429001,         n.a.,    n.a.,\n" +
            " 2020-Jan-05 10:41,*,t, 19 01 58.91, -22 40 29.7,  -26.779,-10.590,  0.98323262373470,  0.0012217,    0.0000,/?,    0.0000,   2.5242233,  83.728742,  -0.003403,         n.a.,    n.a.,\n" +
            " 2020-Jan-05 14:36,C,s, 19 02 41.58, -22 39 24.6,  -26.779,-10.590,  0.98324433648587,  0.2255090,    0.0000,/?,    0.0000,   2.5364427,  83.512435,  0.4228268,         n.a.,    n.a.,\n" +
            " 2020-Jan-06 06:46,*,r, 19 05 39.65, -22 34 52.9,  -26.779,-10.590,  0.98324668734549, -0.2136501,    0.0000,/?,    0.0000,   2.5345522,  83.577483,  -0.412115,         n.a.,    n.a.,\n" +
            " 2020-Jan-06 10:42,*,t, 19 06 22.45, -22 33 46.0,  -26.779,-10.590,  0.98323609731203,  0.0118621,    0.0000,/?,    0.0000,   2.5240320,  83.302323,  0.0169198,         n.a.,    n.a.,\n" +
            " 2020-Jan-06 14:38,C,s, 19 07 05.23, -22 32 36.3,  -26.779,-10.590,  0.98324891075212,  0.2366940,    0.0000,/?,    0.0000,   2.5364313,  83.089248,  0.4440836,         n.a.,    n.a.,"

    @Test
    fun linesToData() {
        // Arrange
        val firstDate = makeDate(1,1)
        val lastDate = makeDate(1,6)
        val sunriseCalc = SunriseCalc(File.createTempFile("temp", "test"), 1)

        // Act
        val result = sunriseCalc.linesToData(testData.lineSequence())

        // Assert
        kotlin.test.assertContains(result, firstDate)
        kotlin.test.assertContains(result, makeDate(1,2))
        kotlin.test.assertContains(result, makeDate(1,3))
        kotlin.test.assertContains(result, makeDate(1,4))
        kotlin.test.assertContains(result, makeDate(1,5))
        kotlin.test.assertContains(result, lastDate)
        kotlin.test.assertEquals(LocalTime(7,47), result[firstDate]?.sunrise)
        kotlin.test.assertEquals(LocalTime(15,32), result[firstDate]?.sunset)
        kotlin.test.assertEquals(LocalTime(7,46), result[lastDate]?.sunrise)
        kotlin.test.assertEquals(LocalTime(15,38), result[lastDate]?.sunset)
    }

    private fun makeDate(month: Int, day: Int): LocalDateTime {
        return LocalDateTime(2020, month, day, 0, 0)
    }
}